buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/maven' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
        classpath group: 'org.parchmentmc.librarian.forgegradle', name: 'org.parchmentmc.librarian.forgegradle.gradle.plugin', version: '1.+'
    }
}

plugins {
	id 'com.diffplug.spotless' version '6.22.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'pmd'

jarJar.enable()

ext.configFile = file('build.properties')
ext.depsFile = file('dependencies.properties')
ext.config = parseConfig(configFile)
ext.deps = parseConfig(depsFile)

version = "${config.version}-${config.build_number}"
group = "org.violetmoon.${config.mod_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = config.mod_name

compileJava.options.compilerArgs << "-Xlint:all,-classfile,-processing,-deprecation"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        configureEach {
            property "mixin.debug.export", "true"
            mods {
                quark {
                    source sourceSets.main
                }
            }
        }

        client {
            workingDirectory project.file('run')
        }

        server {
            workingDirectory project.file('runServer')
        }
    }
}

mixin {
    add sourceSets.main, 'quark.mixins.refmap.json'
    config 'quark.mixins.json'
    config 'quark_integrations.mixins.json'
}

repositories {

    mavenLocal()

    maven {
        // for Zeta and JEI
        name "blamejared"
        url "https://maven.blamejared.com"
        content {
            includeGroup("org.violetmoon.zeta")
            includeGroup("mezz.jei")
        }
    }
    maven {
        name "TerraformersMC"
        url "https://maven.terraformersmc.com"
    }
    maven {
        name "cursemaven"
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        url = "https://maven.fabricmc.net/"
    }
    maven { // Curios api
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup("top.theillusivec4.curios")
        }
    }

    maven {
        name "jitpack"
        url "https://jitpack.io"
    }
    maven {
        // mirrors many mavens, useful as a backup in case one goes down for a bit
        name = "ModMaven"
        url = "https://modmaven.dev"
        content {
            includeGroup("org.violetmoon.zeta")
            includeGroup("mezz.jei")
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${config.mc_version}-${deps.forge}"

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.2"))
    implementation("io.github.llamalad7:mixinextras-forge:0.3.2")

    //annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    //normal AP is broken!!
    annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'


    //runtimeOnly fg.deobf("dev.emi:emi-forge:${deps.emi}")
    runtimeOnly fg.deobf("curse.maven:spark-361579:${deps.spark}")

    implementation fg.deobf("org.violetmoon.zeta:Zeta:${deps.zeta}")
    implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${deps.terrablender}")
    implementation fg.deobf("curse.maven:flan-forge-493246:${deps.flan}")
    implementation fg.deobf("curse.maven:lootr-361276:${deps.lootr}")
    runtimeOnly fg.deobf("curse.maven:just-enough-resources-jer-240630:4689010")

    runtimeOnly fg.deobf("curse.maven:nofog-296468:4601446")
    runtimeOnly fg.deobf("curse.maven:woodworks-543610:5292418")
    runtimeOnly fg.deobf("curse.maven:blueprint-382216:5292242")
    runtimeOnly fg.deobf("curse.maven:farmers-delight-398521:5051242")

    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:${deps.curios}")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:${deps.curios}:api")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${config.mc_version}-common-api:${deps.jei}")
    compileOnly fg.deobf("mezz.jei:jei-${config.mc_version}-forge-api:${deps.jei}")
    // at runtime, use the full JEI jar for Forge
    runtimeOnly fg.deobf("mezz.jei:jei-${config.mc_version}-forge:${deps.jei}")
}

spotless {
    enforceCheck = false // workaround around jenkins having wrong line endings in some files
    java {
        target project.fileTree(dir: 'src/main/java/org/violetmoon/quark', include: '**/*.java')
        //indentWithTabs()
        eclipse().configFile 'spotless/eclipseformat.xml'
        removeUnusedImports()
        importOrderFile 'spotless/eclipse.importorder'
        replaceRegex 'Too much space after if', '(if|for|while|switch) +\\(', '$1('
    }
}

pmd {
    toolVersion '6.42.0'
    incrementalAnalysis.set(true)
    ruleSets.clear()
    ruleSetFiles = files("spotless/pmd-ruleset.xml")
}

task checkSyntax (group: "verification") {
    // Replace the following line when Spotless is setup
    //dependsOn spotlessJavaCheck, pmdMain
    dependsOn pmdMain
}

processResources {
    // copy everything excluding psd files
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/psd/**'
        duplicatesStrategy 'include'
    }

/*
    TODO: figure out a way to bring this back while keeping
    the standard file.version format
    
    // Formats 1.0-13.58 to 1.0-13 (removes the build number)
    String zetaVer = deps.zeta.substring(0, deps.zeta.lastIndexOf('.'))
    String curiosVer = deps.curios;
    String versionStr = version as String;

    file = new Object() {
        String version = versionStr;
    };

    Map<String, String> properties = Map.of(
            "zeta_ver", zetaVer,
            "curios_ver", curiosVer,
            "file", file
    )

    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("META-INF/mods.toml") {
        expand properties
    }
*/
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

jar {
    classifier "pure" // Jar without jar-in-jar

     manifest {
        attributes([
            "Specification-Title": "${config.mod_id}",
            "Specification-Vendor": "vazkii",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${config.mod_id}",
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"vazkii",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "quark.mixins.json,quark_integrations.mixins.json"
        ])
    }

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

task sourcesJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task deobfJar(type: Jar) {
    classifier "deobf"
    from sourceSets.main.output
}

tasks.jarJar.configure {
    classifier "" // "Main" jar should be the one with jar-in-jar

    exclude "**/*.bat"
    exclude "**/*.psd"
    exclude "**/*.exe"
    exclude "**/unused"
    exclude "**/genscripts"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

publish.dependsOn(project.tasks.getByName("assemble"))
publish.mustRunAfter(project.tasks.getByName("build"))

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {
                classifier 'sources'
            }

            jarJar.component(it)
        }
    }

    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }

    }
}

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {

    enabled = false
}
